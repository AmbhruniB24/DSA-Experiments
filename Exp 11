#include <stdio.h>
#include <stdlib.h>

#define MAX 20

int adj[MAX][MAX];   // adjacency matrix
int visited[MAX];
int queue[MAX];
int front = -1, rear = -1;
int n; // number of vertices

// Function to add an edge (directed)
void addEdge(int u, int v) {
    adj[u][v] = 1;
}

// BFS traversal
void BFS(int start) {
    int i, vertex;

    for (i = 0; i < n; i++)
        visited[i] = 0;

    front = rear = -1;
    queue[++rear] = start;
    visited[start] = 1;

    printf("BFS Traversal: ");

    while (front != rear) {
        vertex = queue[++front];
        printf("%d ", vertex);

        for (i = 0; i < n; i++) {
            if (adj[vertex][i] == 1 && visited[i] == 0) {
                queue[++rear] = i;
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

// DFS traversal (recursive)
void DFS(int v) {
    int i;
    visited[v] = 1;
    printf("%d ", v);

    for (i = 0; i < n; i++) {
        if (adj[v][i] == 1 && visited[i] == 0) {
            DFS(i);
        }
    }
}

int main() {
    int edges, u, v, start, i, j;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    // initialize adjacency matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            adj[i][j] = 0;

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    printf("Enter edges (u v) for directed graph:\n");
    for (i = 0; i < edges; i++) {
        scanf("%d%d", &u, &v);
        addEdge(u, v);
    }

    printf("Enter starting vertex: ");
    scanf("%d", &start);

    // BFS
    BFS(start);

    // DFS
    for (i = 0; i < n; i++)
        visited[i] = 0;

    printf("DFS Traversal: ");
    DFS(start);
    printf("\n");

    return 0;
}
